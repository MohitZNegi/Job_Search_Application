@model IPagedList<Job_Search_Application.Models.JobRequest_Model>

@{
    ViewBag.Title = "GetRequestsStatus";
}
@using X.PagedList;
@using X.PagedList.Mvc;
@using X.PagedList.Mvc.Core;
@using System.Linq;
@using System.Web;
@using X.PagedList.Web.Common;
<br />
@{
    Html.RenderPartial("_EmployeeNavPartial2");
}

<div class="container mt-3">
    @if (Model.Count() == 0)
    {
        <div class="alert alert-info">
            <span>You have not applied for any jobs yet.</span>
        </div>
    }
    else
    {
        <br />


        <h3>Applied Jobs</h3>
        <br />
        <table class="table table-striped table-borderless shadow-lg rounded-3" style="text-align:center; background-color:rgb(128, 204, 255);">
            <thead>
                <tr>
                    <th>Job Title</th>
                    <th>Company Name</th>
                    <th>Location</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td ><a style="color:aliceblue" href="/Job/JobsApplication/@item.JobId">@item.Job.Title</a></td>
                        <td>@item.Employer.Company_Name</td>
                        <td>@item.Job.Job_Location</td>
                        <td>
                                  @if (item.Request_Status == "pending")
                                    {
                                       <span class="badge bg-primary">Pending</span>
                                    }
                                    else if (item.Request_Status == "accepted" && item.InterviewRequest_Status == "pending")
                                    {
                                       <span class="badge bg-success">Accepted</span>
                                    }
                                    else if (item.Request_Status == "rejected" && item.InterviewRequest_Status == "pending")
                                    {
                                       <span class="badge bg-danger">Rejected</span>
                                    }
                                        else if (item.Request_Status == "accepted" && item.InterviewRequest_Status == "accepted")
                                    {
                                       <span class="badge bg-primary">Pending interview</span>
                                    }
                                     else if (item.Request_Status == "rejected" && item.InterviewRequest_Status == "canceled")
                                    {
                                        <span class="badge bg-danger">Declined</span>
                                    }
                                        else if (item.Request_Status == "accepted" && item.InterviewRequest_Status == "declined")
                                    {
                                        <span class="badge bg-danger">Withdrawn</span>
                                    }
                                        else if (item.Request_Status == "accepted" && item.InterviewRequest_Status == "interviewed")
                                    {
                                       <span class="badge bg-warning">Interviewed</span>
                                    }
                                        else if (item.Request_Status == "rejected" && item.InterviewRequest_Status == "interviewed")
                                    {
                                       <span class="badge bg-danger">Rejected</span>
                                    }
                                        else if (item.Request_Status == "accepted" && item.InterviewRequest_Status == "hired")
                                    {
                                        <span class="badge bg-success">Hired</span>
                                    }
                                        else if (item.Request_Status == "withdrawn")
                                    {
                                        <span class="badge bg-danger">Withdrawn</span>
                                    }
                         
                        </td>
                        <td>
                            @if (item.Request_Status == "accepted" || item.Request_Status == "rejected")
                            {
                                @Html.ActionLink("View Request", "GetJobsApplied", "Employee", new { id = item.EmployerId, requestID = item.JobRequest_Id }, new { @class = "btn btn-primary" })
                            }
                            @if (item.Request_Status == "pending")
                            {
                                <p>Awaiting Review</p>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <br />
        <br/>

        <div id="paginationContainer" class="pagination bootswatch-flatly justify-content-center">
            @Html.PagedListPager(Model,
        page => Url.Action("GetRequests_Status", new { page }),
        new PagedListRenderOptions
        {
        UlElementClasses = new[] { "pagination" },
        LiElementClasses = new[] { "page-item" },
        ActiveLiElementClass = "active",
        DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
        DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,
        DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
        DisplayLinkToNextPage = PagedListDisplayMode.Always,
        MaximumPageNumbersToDisplay = 5,
        LinkToFirstPageFormat = "&laquo;",
        LinkToPreviousPageFormat = "&lt;",
        LinkToNextPageFormat = "&gt;",
        LinkToLastPageFormat = "&raquo;"
        })
        </div>
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('.js-refresh').click(function () {
                $.get('/api/Employee/GetRequestsStatus', function (data) {
                    $('.data-count').text(data.length);
                    $.each(data, function (i, jobRequest) {
                        $('.requests').append('<li>' + jobRequest.RequestStatus + '</li>');
                    });
                });
            });
        });
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var paginationContainer = document.querySelector(".pagination.bootswatch-flatly");
            var paginationLinks = paginationContainer.getElementsByTagName("a");
            var activePage = paginationContainer.querySelector(".pagination > .active");

            // Add custom CSS classes to the pagination links
            for (var i = 0; i < paginationLinks.length; i++) {
                paginationLinks[i].classList.add("page-link");
                paginationLinks[i].style.backgroundColor = "#f8f9fa";  // Light blue color
                paginationLinks[i].style.color = "#212529";  // White color
            }

            // Add custom CSS classes to the active page
            activePage.classList.add("page-item");
            activePage.firstChild.classList.add("page-link");
            activePage.firstChild.style.backgroundColor = "#007bff";  // Blue color
            activePage.firstChild.style.color = "#fff";  // White color
        });
    </script>

}
